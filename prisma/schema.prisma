// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id      String   @id
  email   String   @unique
  username   String   @unique
  displayName   String?
  name          String?
  bio           String?
  location      String?
  job           String?
  img           String?
  cover         String?

  posts   Post[]
  likes Like[]
  SavedPosts SavedPosts[]
  followers Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")
}
model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  desc       String?    @db.VarChar(255)
  img        String?
  video      String?
  isSensitive Boolean @default(false)

  userId   String
  user     User       @relation(fields: [userId], references: [id])

  repostId Int?
  rePost Post? @relation("rePosts",fields:[repostId],references: [id])
  rePosts Post[] @relation("rePosts")

  parentPostId Int?
  parentPost Post? @relation("PostComments",fields:[parentPostId],references: [id])
  comments Post[] @relation("PostComments")

  likes Like[]
  saves SavedPosts[] 

}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId Int?
  userId String?
  user User? @relation(fields: [userId],references: [id])
  post Post? @relation(fields: [postId],references: [id])  
}

model SavedPosts {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  postId Int?
  userId String?
  user User? @relation(fields: [userId],references: [id])
  post Post? @relation(fields: [postId],references: [id])  
}
model Follow {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  followerId String
  followingId String
  follower User? @relation("UserFollowers",fields: [followerId],references: [id])
  following User? @relation("UserFollowings",fields: [followingId],references: [id])

}
